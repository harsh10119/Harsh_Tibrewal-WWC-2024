Q1: Convert Sorted Array to Binary Search Tree
Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.

//CODE
#include <iostream>
#include <vector>

using namespace std;

// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

// Function to convert sorted array to BST
TreeNode* sortedArrayToBST(vector<int>& nums, int left, int right) {
    if (left > right) {
        return nullptr; // Base case: no elements to form a tree
    }
    
    int mid = left + (right - left) / 2; // Find the middle index
    TreeNode* root = new TreeNode(nums[mid]); // Create a node with the middle element
    
    // Recursively build the left and right subtrees
    root->left = sortedArrayToBST(nums, left, mid - 1); // Left half
    root->right = sortedArrayToBST(nums, mid + 1, right); // Right half
    
    return root;
}

// Helper function to print the tree (in-order traversal)
void printInOrder(TreeNode* root) {
    if (root) {
        printInOrder(root->left);
        cout << root->val << " ";
        printInOrder(root->right);
    }
}

int main() {
    vector<int> nums = {-10, -3, 0, 5, 9}; // Example sorted array
    
    TreeNode* root = sortedArrayToBST(nums, 0, nums.size() - 1);
    
    cout << "In-order traversal of the BST: ";
    printInOrder(root); // Output the tree in in-order to verify the structure
    cout << endl;

    return 0;
}

Q2: Valid Sudoku
Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:
Each row must contain the digits 1-9 without repetition. Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.

//CODE 

#include <iostream>
#include <vector>

using namespace std;

bool isValidSudoku(vector<vector<char>>& board) {
    // Arrays to track the presence of numbers
    bool rows[9][10] = {false}; // rows[i][j] is true if number j is in row i
    bool cols[9][10] = {false}; // cols[j][i] is true if number j is in column i
    bool boxes[9][10] = {false}; // boxes[k][j] is true if number j is in box k

    for (int i = 0; i < 9; ++i) {
        for (int j = 0; j < 9; ++j) {
            char num = board[i][j];
            if (num != '.') { // Only check filled cells
                int n = num - '0'; // Convert char to int (1-9)
                int boxIndex = (i / 3) * 3 + (j / 3); // Calculate box index

                // Check for duplicates
                if (rows[i][n] || cols[j][n] || boxes[boxIndex][n]) {
                    return false; // Found a duplicate
                }

                // Mark the number as seen
                rows[i][n] = true;
                cols[j][n] = true;
                boxes[boxIndex][n] = true;
            }
        }
    }

    return true; // No duplicates found, the board is valid
}

int main() {
    // Example Sudoku board (0-9, '.' for empty cells)
    vector<vector<char>> board = {
        {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
        {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
        {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
        {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
        {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
        {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
        {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
        {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
        {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
    };

    if (isValidSudoku(board)) {
        cout << "The Sudoku board is valid." << endl;
    } else {
        cout << "The Sudoku board is not valid." << endl;
    }

    return 0;
}


Q3: Remove Element

Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. 
Then return the number of unique elements in nums.

//CODE

#include <iostream>
#include <vector>

using namespace std;

int removeDuplicates(vector<int>& nums) {
    if (nums.empty()) return 0; // Handle empty array case

    int uniqueIndex = 0; // Pointer for the position of unique elements

    // Start from the second element and compare with the previous one
    for (int i = 1; i < nums.size(); ++i) {
        if (nums[i] != nums[uniqueIndex]) { // Found a new unique element
            uniqueIndex++; // Move to the next position for unique element
            nums[uniqueIndex] = nums[i]; // Update the position with the new unique element
        }
    }

    return uniqueIndex + 1; // Return the count of unique elements
}

int main() {
    vector<int> nums = {1, 1, 2, 2, 3, 4, 4, 5}; // Example input

    int uniqueCount = removeDuplicates(nums);

    cout << "Number of unique elements: " << uniqueCount << endl;
    cout << "Array after removing duplicates: ";
    for (int i = 0; i < uniqueCount; ++i) {
        cout << nums[i] << " ";
    }
    cout << endl;

    return 0;
}
