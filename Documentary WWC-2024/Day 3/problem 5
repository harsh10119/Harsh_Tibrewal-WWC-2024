Q5 Minimun  non zero product of an Array Elements
You are given a positive integer p. Consider an array nums (1-indexed) that consists of the integers in the inclusive range [1, 2p - 1] in their binary representations. You are allowed to do the following operation any number of times:
 Choose two elements x and y from nums.
Choose a bit in x and swap it with its corresponding bit in y. Corresponding bit refers to the bit that is in the same position in the other integer.
For example, if x = 1101 and y = 0011, after swapping the 2nd bit from the right, we have x = 1111 and y = 0001.
Find the minimum non-zero product of nums after performing the above operation any number of times. Return this product modulo 109 + 7.


//CODE


#include <iostream>

using namespace std;

long long power(long long base, long long exp, long long mod) {
    long long res = 1;
    base %= mod;
    while (exp > 0) {
        if (exp % 2 == 1) res = (res * base) % mod;
        base = (base * base) % mod;
        exp /= 2;
    }
    return res;
}

int minNonZeroProduct(int p) {
    long long MOD = 1e9 + 7;
    long long max_num = (1LL << p) - 1;
    long long count = (1LL << (p - 1)) - 1;
    long long mid_num = (1LL << (p - 1));

    long long result = power(max_num, count, MOD);
    result = (result * mid_num) % MOD;
    return (int)result;
}

int main() {
    cout << minNonZeroProduct(1) << endl;   // Output: 1
    cout << minNonZeroProduct(2) << endl;   // Output: 6
    cout << minNonZeroProduct(3) << endl;   // Output: 210
    cout << minNonZeroProduct(4) << endl;   // Output: 4680
    cout << minNonZeroProduct(19) << endl; // large number
    return 0;
}
